function render() {
  var canvas = document.getElementById('canvas');
  var gl = canvas.getContext('webgl');
  gl.clearColor(0.0, 0.0, 0.0, 1.0);
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  gl.viewport(0, 0, canvas.width, canvas.height);
  var shaderProgram = initShaderProgram(gl, vsSource, fsSource);
  gl.useProgram(shaderProgram);
  // ... set up buffers, uniforms, attributes, etc.
var vertices = [
  10, 0, 0, 0.49803922, 1, 0,
  9.135454, 0, 4.0673666, 0.49803922, 1, 0,
  6.6913056, 0, 7.431449, 0.49803922, 1, 0,
  3.0901697, 0, 9.510566, 0.49803922, 1, 0,
  -1.0452851, -0, 9.945219, 0.49803922, 1, 0,
  -5.0000005, -0, 8.660254, 0.49803922, 1, 0,
  -8.090171, -0, 5.877852, 0.49803922, 1, 0,
  -9.781476, -0, 2.079116, 0.49803922, 1, 0,
  -9.781476, -0, -2.0791178, 0.49803922, 1, 0,
  -8.09017, -0, -5.8778534, 0.49803922, 1, 0,
  -4.999999, -0, -8.6602545, 0.49803922, 1, 0,
  -1.0452833, -0, -9.945219, 0.49803922, 1, 0,
  3.0901713, 0, -9.510565, 0.49803922, 1, 0,
  6.6913075, 0, -7.4314475, 0.49803922, 1, 0,
  9.135455, 0, -4.0673647, 0.49803922, 1, 0,
  9.135454, 4.0673666, 0, 0.49803922, 1, 0,
  8.345653, 3.715724, 4.0673666, 0.49803922, 1, 0,
  6.1128116, 2.721599, 7.431449, 0.49803922, 1, 0,
  2.8230104, 1.2568853, 9.510566, 0.49803922, 1, 0,
  -0.9549154, -0.42515576, 9.945219, 0.49803922, 1, 0,
  -4.5677276, -2.0336835, 8.660254, 0.49803922, 1, 0,
  -7.390738, -3.2905688, 5.877852, 0.49803922, 1, 0,
  -8.9358225, -3.9784849, 2.079116, 0.49803922, 1, 0,
  -8.9358225, -3.9784846, -2.0791178, 0.49803922, 1, 0,
  -7.3907375, -3.2905684, -5.8778534, 0.49803922, 1, 0,
  -4.567726, -2.0336828, -8.6602545, 0.49803922, 1, 0,
  -0.95491385, -0.42515504, -9.945219, 0.49803922, 1, 0,
  2.8230119, 1.2568858, -9.510565, 0.49803922, 1, 0,
  6.1128135, 2.7216, -7.4314475, 0.49803922, 1, 0,
  8.345654, 3.7157245, -4.0673647, 0.49803922, 1, 0,
  6.6913056, 7.431449, 0, 0.49803922, 1, 0,
  6.1128116, 6.788966, 4.0673666, 0.49803922, 1, 0,
  4.477357, 4.9726095, 7.431449, 0.49803922, 1, 0,
  2.067727, 2.2964437, 9.510566, 0.49803922, 1, 0,
  -0.6994322, -0.77679825, 9.945219, 0.49803922, 1, 0,
  -3.345653, -3.7157247, 8.660254, 0.49803922, 1, 0,
  -5.41338, -6.0121684, 5.877852, 0.49803922, 1, 0,
  -6.545085, -7.269054, 2.079116, 0.49803922, 1, 0,
  -6.545084, -7.2690535, -2.0791178, 0.49803922, 1, 0,
  -5.4133797, -6.012168, -5.8778534, 0.49803922, 1, 0,
  -3.345652, -3.7157238, -8.6602545, 0.49803922, 1, 0,
  -0.69943106, -0.776797, -9.945219, 0.49803922, 1, 0,
  2.067728, 2.296445, -9.510565, 0.49803922, 1, 0,
  4.4773583, 4.972611, -7.4314475, 0.49803922, 1, 0,
  6.112813, 6.7889667, -4.0673647, 0.49803922, 1, 0,
  3.0901697, 9.510566, 0, 0.49803922, 1, 0,
  2.8230104, 8.6883335, 4.0673666, 0.49803922, 1, 0,
  2.067727, 6.3638096, 7.431449, 0.49803922, 1, 0,
  0.9549149, 2.9389262, 9.510566, 0.49803922, 1, 0,
  -0.32301083, -0.99412525, 9.945219, 0.49803922, 1, 0,
  -1.545085, -4.7552834, 8.660254, 0.49803922, 1, 0,
  -2.5, -7.69421, 5.877852, 0.49803922, 1, 0,
  -3.0226421, -9.302737, 2.079116, 0.49803922, 1, 0,
  -3.0226421, -9.302736, -2.0791178, 0.49803922, 1, 0,
  -2.4999998, -7.6942086, -5.8778534, 0.49803922, 1, 0,
  -1.5450846, -4.755282, -8.6602545, 0.49803922, 1, 0,
  -0.32301033, -0.9941236, -9.945219, 0.49803922, 1, 0,
  0.95491534, 2.9389274, -9.510565, 0.49803922, 1, 0,
  2.0677276, 6.3638115, -7.4314475, 0.49803922, 1, 0,
  2.8230107, 8.688334, -4.0673647, 0.49803922, 1, 0,
  -1.0452851, 9.945219, 0, 0.49803922, 1, 0,
  -0.9549154, 9.085409, 4.0673666, 0.49803922, 1, 0,
  -0.6994322, 6.6546497, 7.431449, 0.49803922, 1, 0,
  -0.32301083, 3.0732415, 9.510566, 0.49803922, 1, 0,
  0.109262094, -1.0395589, 9.945219, 0.49803922, 1, 0,
  0.5226426, -4.97261, 8.660254, 0.49803922, 1, 0,
  0.8456535, -8.045853, 5.877852, 0.49803922, 1, 0,
  1.022443, -9.727892, 2.079116, 0.49803922, 1, 0,
  1.022443, -9.727892, -2.0791178, 0.49803922, 1, 0,
  0.84565336, -8.045851, -5.8778534, 0.49803922, 1, 0,
  0.52264243, -4.9726086, -8.6602545, 0.49803922, 1, 0,
  0.109261915, -1.0395572, -9.945219, 0.49803922, 1, 0,
  -0.32301098, 3.073243, -9.510565, 0.49803922, 1, 0,
  -0.69943243, 6.6546516, -7.4314475, 0.49803922, 1, 0,
  -0.9549155, 9.085411, -4.0673647, 0.49803922, 1, 0,
  -5.0000005, 8.660254, 0, 0.49803922, 1, 0,
  -4.5677276, 7.9115353, 4.0673666, 0.49803922, 1, 0,
  -3.345653, 5.7948403, 7.431449, 0.49803922, 1, 0,
  -1.545085, 2.6761653, 9.510566, 0.49803922, 1, 0,
  0.5226426, -0.90524346, 9.945219, 0.49803922, 1, 0,
  2.5000005, -4.3301277, 8.660254, 0.49803922, 1, 0,
  4.045086, -7.006293, 5.877852, 0.49803922, 1, 0,
  4.8907385, -8.471006, 2.079116, 0.49803922, 1, 0,
  4.8907385, -8.471006, -2.0791178, 0.49803922, 1, 0,
  4.0450854, -7.0062923, -5.8778534, 0.49803922, 1, 0,
  2.4999998, -4.330126, -8.6602545, 0.49803922, 1, 0,
  0.5226418, -0.90524197, -9.945219, 0.49803922, 1, 0,
  -1.5450858, 2.6761665, -9.510565, 0.49803922, 1, 0,
  -3.345654, 5.7948422, -7.4314475, 0.49803922, 1, 0,
  -4.5677285, 7.911536, -4.0673647, 0.49803922, 1, 0,
  -8.090171, 5.877852, 0, 0.49803922, 1, 0,
  -7.390738, 5.3696847, 4.0673666, 0.49803922, 1, 0,
  -5.41338, 3.9330504, 7.431449, 0.49803922, 1, 0,
  -2.5, 1.8163561, 9.510566, 0.49803922, 1, 0,
  0.8456535, -0.61440307, 9.945219, 0.49803922, 1, 0,
  4.045086, -2.9389262, 8.660254, 0.49803922, 1, 0,
  6.545086, -4.7552824, 5.877852, 0.49803922, 1, 0,
  7.9133816, -5.749407, 2.079116, 0.49803922, 1, 0,
  7.9133806, -5.7494063, -2.0791178, 0.49803922, 1, 0,
  6.5450854, -4.755282, -5.8778534, 0.49803922, 1, 0,
  4.045085, -2.9389253, -8.6602545, 0.49803922, 1, 0,
  0.8456521, -0.61440206, -9.945219, 0.49803922, 1, 0,
  -2.5000012, 1.8163569, -9.510565, 0.49803922, 1, 0,
  -5.413382, 3.933051, -7.4314475, 0.49803922, 1, 0,
  -7.3907394, 5.369685, -4.0673647, 0.49803922, 1, 0,
  -9.781476, 2.079116, 0, 0.49803922, 1, 0,
  -8.9358225, 1.899367, 4.0673666, 0.49803922, 1, 0,
  -6.545085, 1.3912001, 7.431449, 0.49803922, 1, 0,
  -3.0226421, 0.64248216, 9.510566, 0.49803922, 1, 0,
  1.022443, -0.2173269, 9.945219, 0.49803922, 1, 0,
  4.8907385, -1.0395582, 8.660254, 0.49803922, 1, 0,
  7.9133816, -1.6820405, 5.877852, 0.49803922, 1, 0,
  9.567728, -2.0336823, 2.079116, 0.49803922, 1, 0,
  9.567727, -2.0336823, -2.0791178, 0.49803922, 1, 0,
  7.91338, -1.6820401, -5.8778534, 0.49803922, 1, 0,
  4.890737, -1.0395579, -8.6602545, 0.49803922, 1, 0,
  1.0224415, -0.21732655, -9.945219, 0.49803922, 1, 0,
  -3.0226436, 0.6424825, -9.510565, 0.49803922, 1, 0,
  -6.5450864, 1.3912005, -7.4314475, 0.49803922, 1, 0,
  -8.935824, 1.8993673, -4.0673647, 0.49803922, 1, 0,
  -9.781476, -2.0791178, 0, 0.49803922, 1, 0,
  -8.9358225, -1.8993686, 4.0673666, 0.49803922, 1, 0,
  -6.545084, -1.3912013, 7.431449, 0.49803922, 1, 0,
  -3.0226421, -0.6424827, 9.510566, 0.49803922, 1, 0,
  1.022443, 0.21732709, 9.945219, 0.49803922, 1, 0,
  4.8907385, 1.0395591, 8.660254, 0.49803922, 1, 0,
  7.9133806, 1.6820419, 5.877852, 0.49803922, 1, 0,
  9.567727, 2.0336843, 2.079116, 0.49803922, 1, 0,
  9.567727, 2.033684, -2.0791178, 0.49803922, 1, 0,
  7.9133797, 1.6820416, -5.8778534, 0.49803922, 1, 0,
  4.890737, 1.0395588, -8.6602545, 0.49803922, 1, 0,
  1.0224414, 0.21732673, -9.945219, 0.49803922, 1, 0,
  -3.0226433, -0.642483, -9.510565, 0.49803922, 1, 0,
  -6.545086, -1.3912017, -7.4314475, 0.49803922, 1, 0,
  -8.935823, -1.8993689, -4.0673647, 0.49803922, 1, 0,
  -8.09017, -5.8778534, 0, 0.49803922, 1, 0,
  -7.3907375, -5.3696866, 4.0673666, 0.49803922, 1, 0,
  -5.4133797, -3.9330516, 7.431449, 0.49803922, 1, 0,
  -2.4999998, -1.8163564, 9.510566, 0.49803922, 1, 0,
  0.84565336, 0.61440325, 9.945219, 0.49803922, 1, 0,
  4.0450854, 2.9389272, 8.660254, 0.49803922, 1, 0,
  6.5450854, 4.755284, 5.877852, 0.49803922, 1, 0,
  7.91338, 5.7494087, 2.079116, 0.49803922, 1, 0,
  7.9133797, 5.749408, -2.0791178, 0.49803922, 1, 0,
  6.545084, 4.7552834, -5.8778534, 0.49803922, 1, 0,
  4.045084, 2.9389262, -8.6602545, 0.49803922, 1, 0,
  0.845652, 0.61440223, -9.945219, 0.49803922, 1, 0,
  -2.500001, -1.8163574, -9.510565, 0.49803922, 1, 0,
  -5.4133806, -3.9330525, -7.4314475, 0.49803922, 1, 0,
  -7.390738, -5.369687, -4.0673647, 0.49803922, 1, 0,
  -4.999999, -8.6602545, 0, 0.49803922, 1, 0,
  -4.567726, -7.911536, 4.0673666, 0.49803922, 1, 0,
  -3.345652, -5.794841, 7.431449, 0.49803922, 1, 0,
  -1.5450846, -2.6761656, 9.510566, 0.49803922, 1, 0,
  0.52264243, 0.90524346, 9.945219, 0.49803922, 1, 0,
  2.4999998, 4.3301277, 8.660254, 0.49803922, 1, 0,
  4.045085, 7.0062933, 5.877852, 0.49803922, 1, 0,
  4.890737, 8.471007, 2.079116, 0.49803922, 1, 0,
  4.890737, 8.471006, -2.0791178, 0.49803922, 1, 0,
  4.045084, 7.0062923, -5.8778534, 0.49803922, 1, 0,
  2.499999, 4.3301263, -8.6602545, 0.49803922, 1, 0,
  0.5226416, 0.905242, -9.945219, 0.49803922, 1, 0,
  -1.5450853, -2.676167, -9.510565, 0.49803922, 1, 0,
  -3.345653, -5.7948422, -7.4314475, 0.49803922, 1, 0,
  -4.567727, -7.9115367, -4.0673647, 0.49803922, 1, 0,
  -1.0452833, -9.945219, 0, 0.49803922, 1, 0,
  -0.95491385, -9.085409, 4.0673666, 0.49803922, 1, 0,
  -0.69943106, -6.6546497, 7.431449, 0.49803922, 1, 0,
  -0.32301033, -3.0732415, 9.510566, 0.49803922, 1, 0,
  0.109261915, 1.0395589, 9.945219, 0.49803922, 1, 0,
  0.5226418, 4.97261, 8.660254, 0.49803922, 1, 0,
  0.8456521, 8.045853, 5.877852, 0.49803922, 1, 0,
  1.0224415, 9.727892, 2.079116, 0.49803922, 1, 0,
  1.0224414, 9.727892, -2.0791178, 0.49803922, 1, 0,
  0.845652, 8.045851, -5.8778534, 0.49803922, 1, 0,
  0.5226416, 4.9726086, -8.6602545, 0.49803922, 1, 0,
  0.10926173, 1.0395572, -9.945219, 0.49803922, 1, 0,
  -0.32301044, -3.073243, -9.510565, 0.49803922, 1, 0,
  -0.69943124, -6.6546516, -7.4314475, 0.49803922, 1, 0,
  -0.954914, -9.085411, -4.0673647, 0.49803922, 1, 0,
  3.0901713, -9.510565, 0, 0.49803922, 1, 0,
  2.8230119, -8.6883335, 4.0673666, 0.49803922, 1, 0,
  2.067728, -6.3638096, 7.431449, 0.49803922, 1, 0,
  0.95491534, -2.938926, 9.510566, 0.49803922, 1, 0,
  -0.32301098, 0.9941251, 9.945219, 0.49803922, 1, 0,
  -1.5450858, 4.755283, 8.660254, 0.49803922, 1, 0,
  -2.5000012, 7.694209, 5.877852, 0.49803922, 1, 0,
  -3.0226436, 9.302736, 2.079116, 0.49803922, 1, 0,
  -3.0226433, 9.302736, -2.0791178, 0.49803922, 1, 0,
  -2.500001, 7.694208, -5.8778534, 0.49803922, 1, 0,
  -1.5450853, 4.7552814, -8.6602545, 0.49803922, 1, 0,
  -0.32301044, 0.9941235, -9.945219, 0.49803922, 1, 0,
  0.9549158, -2.9389274, -9.510565, 0.49803922, 1, 0,
  2.0677285, -6.3638115, -7.4314475, 0.49803922, 1, 0,
  2.823012, -8.688334, -4.0673647, 0.49803922, 1, 0,
  6.6913075, -7.4314475, 0, 0.49803922, 1, 0,
  6.1128135, -6.7889647, 4.0673666, 0.49803922, 1, 0,
  4.4773583, -4.9726086, 7.431449, 0.49803922, 1, 0,
  2.0677276, -2.2964435, 9.510566, 0.49803922, 1, 0,
  -0.69943243, 0.7767981, 9.945219, 0.49803922, 1, 0,
  -3.345654, 3.715724, 8.660254, 0.49803922, 1, 0,
  -5.413382, 6.012168, 5.877852, 0.49803922, 1, 0,
  -6.5450864, 7.269053, 2.079116, 0.49803922, 1, 0,
  -6.545086, 7.2690525, -2.0791178, 0.49803922, 1, 0,
  -5.4133806, 6.012167, -5.8778534, 0.49803922, 1, 0,
  -3.345653, 3.715723, -8.6602545, 0.49803922, 1, 0,
  -0.69943124, 0.7767969, -9.945219, 0.49803922, 1, 0,
  2.0677285, -2.2964444, -9.510565, 0.49803922, 1, 0,
  4.47736, -4.97261, -7.4314475, 0.49803922, 1, 0,
  6.112814, -6.788966, -4.0673647, 0.49803922, 1, 0,
  9.135455, -4.0673647, 0, 0.49803922, 1, 0,
  8.345654, -3.7157226, 4.0673666, 0.49803922, 1, 0,
  6.112813, -2.7215981, 7.431449, 0.49803922, 1, 0,
  2.8230107, -1.2568848, 9.510566, 0.49803922, 1, 0,
  -0.9549155, 0.4251556, 9.945219, 0.49803922, 1, 0,
  -4.5677285, 2.0336828, 8.660254, 0.49803922, 1, 0,
  -7.3907394, 3.2905676, 5.877852, 0.49803922, 1, 0,
  -8.935824, 3.9784834, 2.079116, 0.49803922, 1, 0,
  -8.935823, 3.9784832, -2.0791178, 0.49803922, 1, 0,
  -7.390738, 3.2905672, -5.8778534, 0.49803922, 1, 0,
  -4.567727, 2.033682, -8.6602545, 0.49803922, 1, 0,
  -0.954914, 0.4251549, -9.945219, 0.49803922, 1, 0,
  2.823012, -1.2568854, -9.510565, 0.49803922, 1, 0,
  6.112814, -2.721599, -7.4314475, 0.49803922, 1, 0,
  8.3456545, -3.715723, -4.0673647, 0.49803922, 1, 0,
];
  // ... send vertices to WebGL buffers and draw
  const shaderProgram = initShaderProgram(gl, vsSource, fsSource);
  const programInfo = {
    program: shaderProgram,
    attribLocations: {
      vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),
      vertexColor: gl.getAttribLocation(shaderProgram, 'aVertexColor'),
    },
    uniformLocations: {
      projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),
      modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),
    },
  };
  const buffers = initBuffers(gl);
  drawScene(gl, programInfo, buffers);


}
function initBuffers(gl) {
  // ... create buffers ...
  const positionBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
  return {
    position: positionBuffer,
  };
}

function drawScene(gl, programInfo, buffers) {
  // ... set up vertex attributes ...
  gl.clearColor(0, 0, 0, 1);
  gl.clearDepth(1);
  gl.enable(gl.DEPTH_TEST);
  gl.depthFunc(gl.LEQUAL);
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  const fieldOfView = 45 * Math.PI / 180;
  const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;
  const zNear = 0.1;
  const zFar = 100;
  const projectionMatrix = mat4.create();
  mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);
  const modelViewMatrix = mat4.create();
  mat4.translate(modelViewMatrix, modelViewMatrix, [-0, 0, -6]);
  {
    const numComponents = 3;
    const type = gl.FLOAT;
    const normalize = false;
    const stride = 0;
    const offset = 0;
    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);
    gl.vertexAttribPointer(programInfo.attribLocations.vertexPosition, numComponents, type, normalize, stride, offset);
    gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);
  }
  gl.useProgram(programInfo.program);
  gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix, false, projectionMatrix);
  gl.uniformMatrix4fv(programInfo.uniformLocations.modelViewMatrix, false, modelViewMatrix);
  {
    const offset = 0;
    const vertexCount = 18;
    gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);
  }
}
function loadShader(gl, type, source) {
  // ... load and compile shader, return it
  const shader = gl.createShader(type);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  return shader;
}



function initShaderProgram(gl, vsSource, fsSource) { 
  // ... load and compile shaders, link program, return it
  const shaderProgram = gl.createProgram();
  gl.attachShader(shaderProgram, loadShader(gl, gl.VERTEX_SHADER, vsSource));
  gl.attachShader(shaderProgram, loadShader(gl, gl.FRAGMENT_SHADER, fsSource));
  gl.linkProgram(shaderProgram);
  return shaderProgram;
 }

// ... more WebGL functions
var vsSource = `
  attribute vec4 aVertexPosition;
  attribute vec4 aVertexColor;

  uniform mat4 uModelViewMatrix;
  uniform mat4 uProjectionMatrix;

  varying lowp vec4 vColor;

  void main() {
    gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;
    vColor = aVertexColor;
  }
`;

var fsSource = `
  varying lowp vec4 vColor;

  void main() {
    gl_FragColor = vColor;
  }
`;
